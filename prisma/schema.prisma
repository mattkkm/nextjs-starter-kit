generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User management models
model user {
  id                Int      @id @default(autoincrement())
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  subscription      String?
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
}

// Industry and Company models
model Industry {
  id           String           @id @default(cuid())
  name         String
  description  String?
  parameters   Json?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  userId       String
  companies    Company[]
  majorPlayers IndustryPlayer[]
  reports      Report[]
}

model IndustryPlayer {
  id            String   @id @default(cuid())
  name          String
  type          PlayerType
  revenue       Float?
  employeeCount Int?
  industryId    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  industry      Industry @relation(fields: [industryId], references: [id])
}

model ScrapedData {
  id        String     @id @default(cuid())
  source    DataSource
  rawData   Json
  processed Boolean    @default(false)
  companyId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  company   Company?   @relation(fields: [companyId], references: [id])
}

model Company {
  id               String        @id @default(cuid())
  name             String
  address          String?
  industryId       String
  employeeCount    Int?
  estimatedRevenue Float?
  confidenceScore  Float?
  status           CompanyStatus
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  industry         Industry      @relation(fields: [industryId], references: [id])
  pppLoanData      PPPLoan[]
  scrapedData      ScrapedData[]
  reports          Report[]      @relation("CompanyToReport")
}

model PPPLoan {
  id           String   @id @default(cuid())
  companyId    String
  loanAmount   Float
  loanDate     DateTime
  jobsRetained Int?
  rawData      Json    // Added field
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id])
}

model Report {
  id         String      @id @default(cuid())
  name       String
  type       ReportType
  data       Json
  industryId String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  industry   Industry    @relation(fields: [industryId], references: [id])
  companies  Company[]   @relation("CompanyToReport")
}

model ScrapingJob {
  id          String         @id @default(cuid())
  status      ScrapingStatus
  source      DataSource
  parameters  Json
  results     Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ScrapingHistory {
  id           String         @id @default(cuid())
  source       DataSource
  status       ScrapingStatus
  resultsCount Int
  duration     Int
  error        String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

enum ScrapingStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum DataSource {
  GOOGLE_PLACES
  YELP
  BBB
  APOLLO
  PPP_LOAN
}

enum CompanyStatus {
  VERIFIED
  PENDING
  NEEDS_REVIEW
}

enum PlayerType {
  MAJOR
  SMALL
}

enum ReportType {
  INDUSTRY
  COMPANY
  CUSTOM
}