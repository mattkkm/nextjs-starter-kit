generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                Int      @id @default(autoincrement())
  created_time      DateTime @default(now())
  email             String   @unique
  first_name        String?
  last_name         String?
  gender            String?
  profile_image_url String?
  user_id           String   @unique
  subscription      String?
}

model payments {
  id               Int      @id @default(autoincrement())
  created_time     DateTime @default(now())
  stripe_id        String
  email            String
  amount           String
  payment_time     String
  payment_date     String
  currency         String
  user_id          String
  customer_details String
  payment_intent   String
}

model subscriptions {
  id                        Int      @id @default(autoincrement())
  created_time              DateTime @default(now())
  subscription_id           String
  stripe_user_id            String
  status                    String
  start_date                String
  end_date                  String?
  plan_id                   String
  default_payment_method_id String?
  email                     String
  user_id                   String
}

model subscriptions_plans {
  id           Int      @id @default(autoincrement())
  created_time DateTime @default(now())
  plan_id      String
  name         String
  description  String
  amount       String
  currency     String
  interval     String
}

model invoices {
  id              Int      @id @default(autoincrement())
  created_time    DateTime @default(now())
  invoice_id      String
  subscription_id String
  amount_paid     String
  amount_due      String?
  currency        String
  status          String
  email           String
  user_id         String?
}

model Project {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
}

// This will store the industry research parameters and results
model Industry {
  id              String           @id @default(cuid())
  name            String
  description     String?
  parameters      Json?            // Flexible storage for research parameters
  majorPlayers    IndustryPlayer[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String           // Clerk user ID
  reports         Report[]
  companies       Company[]
}

model IndustryPlayer {
  id          String    @id @default(cuid())
  name        String
  type        String    // "MAJOR" or "SMALL"
  revenue     Float?
  employeeCount Int?
  industry    Industry  @relation(fields: [industryId], references: [id])
  industryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Stores raw scraped data before processing
model ScrapedData {
  id          String    @id @default(cuid())
  source      String    // "GOOGLE_MAPS", "YELP", "BBB", etc.
  rawData     Json
  processed   Boolean   @default(false)
  company     Company?  @relation(fields: [companyId], references: [id])
  companyId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Main company model after deduplication
model Company {
  id              String        @id @default(cuid())
  name            String
  address         String?
  industry        Industry      @relation(fields: [industryId], references: [id])
  industryId      String
  employeeCount   Int?
  estimatedRevenue Float?
  pppLoanData     PPPLoan[]
  scrapedData     ScrapedData[]
  confidenceScore Float?        // Confidence in data accuracy
  status          String        // "VERIFIED", "PENDING", "NEEDS_REVIEW"
  reports         Report[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model PPPLoan {
  id          String    @id @default(cuid())
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  loanAmount  Float
  loanDate    DateTime
  jobsRetained Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Report {
  id          String    @id @default(cuid())
  name        String
  type        String    // "INDUSTRY", "COMPANY", "CUSTOM"
  data        Json
  industry    Industry  @relation(fields: [industryId], references: [id])
  industryId  String
  companies   Company[]
  userId      String    // Clerk user ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// For tracking scraping jobs
model ScrapingJob {
  id          String    @id @default(cuid())
  status      String    // "PENDING", "RUNNING", "COMPLETED", "FAILED"
  source      String    // "GOOGLE_MAPS", "YELP", "BBB", etc.
  parameters  Json
  results     Json?
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
